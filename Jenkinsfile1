pipeline {
    agent none  // No utilizamos un agente global, cada etapa tendrá su propio agente Docker.

    stages {
              stage('Build') {
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-17'  // Usamos Maven con OpenJDK 17 para construir el proyecto
                    args '-v /root/.m2:/root/.m2'  // Compartimos el repositorio local de Maven
                }
            }
            steps {
                script {
                    dir('repositorio') {
                        // Compilar el proyecto Maven
                        sh 'mvn clean compile'
                    }
                }
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-17'  // Usamos la misma imagen de Maven para ejecutar pruebas
                    args '-v /root/.m2:/root/.m2'  // Compartimos el repositorio local de Maven
                }
            }
            steps {
                script {
                    dir('repositorio') {
                        // Ejecutar pruebas unitarias
                        sh 'mvn test'
                    }
                }
            }
        }

        stage('Package') {
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-17'  // Usamos la misma imagen de Maven para empaquetar el proyecto
                    args '-v /root/.m2:/root/.m2'  // Compartimos el repositorio local de Maven
                }
            }
            steps {
                script {
                    dir('repositorio') {
                        // Empaquetar el proyecto (generar JAR o WAR)
                        sh 'mvn package'
                    }
                }
            }
        }

        stage('Static Code Analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli'  // Usamos la imagen de SonarQube Scanner para análisis de código estático
                }
            }
            steps {
                script {
                    dir('repositorio') {
                        // Ejecutar SonarQube para análisis de código estático
                        sh 'sonar-scanner'
                    }
                }
            }
        }

        stage('Deploy') {
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-17'  // Usamos Maven para ejecutar el despliegue
                    args '-v /root/.m2:/root/.m2'  // Compartimos el repositorio local de Maven
                }
            }
            steps {
                script {
                    dir('repositorio') {
                        // Desplegar el proyecto (puede ser en un servidor o en un repositorio de artefactos)
                        sh 'mvn deploy'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'El pipeline ha finalizado.'
        }
        success {
            echo 'Pipeline ejecutado con éxito.'
        }
        failure {
            echo 'El pipeline ha fallado.'
        }
    }
}
